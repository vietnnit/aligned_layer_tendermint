<!doctype html>

<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Faucet for AlignedLayer</title>
  <link rel="icon"
    href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🟩</text></svg>" />
  <meta name=”robots” content="index, follow">
  <meta name="description" content="Uniform Faucet Tool For Cosmos SDK Blockchains - Powered By Ping.pub">
  <meta>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">

  <!--  Google Recaptcha -->
  <script src="https://www.google.com/recaptcha/enterprise.js?render=6Le3Q8cpAAAAAG-bWQRiAFh53NCy9Er48aKHJ1lf"></script>
  <script>
    // onload.js

    const getToken = async (code) => {
      const result = await fetch('http://localhost:3000/getToken', {
        method: 'POST',
        body: JSON.stringify({ code }),
        headers: {
          "Content-Type": "application/json",
        },
      })

      const resultJson = await result.json()
      window.localStorage.setItem("access_token", resultJson.access_token)
      window.localStorage.setItem("token_type", resultJson.token_type)
      return resultJson
    }

    const getMe = async (tokenType, accessToken) => {
      const result = await fetch('http://localhost:3000/p/getMe', {
        headers: {
          authorization: `${accessToken}`,
        },
      })

      const resultJson = await result.json()
      const { username, id } = resultJson;
      document.getElementById('info').innerText = `Logged in as: ${username} (id: ${id})`;
      return resultJson
    }

    window.onload = async () => {
      const accessToken = window.localStorage.getItem("access_token")

      const tokenType = window.localStorage.getItem("token_type")

      // get code from URL
      const fragment = new URLSearchParams(window.location.search);
      const code = fragment.get('code')
      console.log(code)

      if (!code && !accessToken) {
        // if no code and no token (not logged in),
        // show button "Login with Discord"
        document.getElementById('login').style.display = `block`;
        return
      }

      if (code) {
        // if there is code but no token (code not yet exchanged),
        // exchange code for tokens and save tokens in localStorage
        window.history.replaceState({}, document.title, "/");  // set url to "/"
        const result = await getToken(code)
        console.log(result)
        if (result.token_type && result.access_token) {
          window.localStorage.setItem("token_type", result.token_type)
          window.localStorage.setItem("access_token", result.access_token)
        }
      }
      if (accessToken) {
        // if token exists, just get the user info
        await getMe(tokenType, accessToken)
      }
    }
  </script>
</head>
<body>
  <div id="app">
    <main class="container-md">
      <div class="py-5 text-center">
        <img id="logo" class="d-block mx-auto mb-4" style="max-width: 25px;"
          src="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🟩</text></svg>"
          alt="`${testnet} Faucet`">
        <h1>
          <%= project.name %>
        </h1>
        <p class="lead">
          Welcome to <%= project.name %>! <%= blockchains[0].tx.amount[0].amount%>
              <%= blockchains[0].tx.amount[0].denom%> per Request
        </p>
      </div>
      <div class="row g-5">
        <div class="input-group">
          <span class="input-group-text">
            <select v-model="chain" @change="onChange()">
              <option v-for="c in conf.blockchains">{{c}}</option>
            </select>
          </span>
          <input id="address" class="form-control" :placeholder="placeholder" v-model="address" name="address">
        </div>

        <a class="btn btn-primary mt-4" id="login" href="https://discord.com/oauth2/authorize?client_id=1233546823898108085&response_type=code&redirect_uri=https%3A%2F%2Ffaucet.alignedlayer.com&scope=identify+guilds">
          Discord Login
        </a>
        <p class="m-2" id="info"></p>

        <button type="button" class="btn btn-secondary" @click="requestToken" id="request-tokens-button">
            <span>
              <span id="button-loading" class="spinner-border spinner-border-sm mt-1 mr-1" style="display:none"
                    role="status" aria-hidden="true"></span>
            </span>
          <span class="sr-only">Request Tokens</span>
        </button>
      </div>



      <div id="message" v-html="message"></div>
    </main>

    <footer class="my-5 pt-5 text-muted text-center text-small">
      <p class="my-2"> Faucet Address: {{ faucet }}, <br> Balance: {{ balance.amount }} {{balance.denom}}</p>
      <ul class="list-inline">
        <li class="list-inline-item"><a href="https://github.com/ping-pub/faucet.git">Deploy a new instance?</a></li>
      </ul>
    </footer>
  </div>
  <script type="module">
    import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'
    createApp({
      data() {
        return {
          message: '',
          testnet: 'AlignedLayer Testnet',
          logo: '',
          deployer: '',
          address: '',
          chain: '',
          conf: {},
          balance: {},
        }
      },
      created() {
        fetch("/config.json").then(response => response.json()).then(data => {
          this.conf = data
          this.chain = data.blockchains[0]
          // this.placeholder = `Input an address (e.g.: ${data.sample[this.chain]}) to received tokens`
          this.onChange();
        });
      },
      computed: {
        placeholder() {
          if (this.conf.sample) {
            return `Input an address (e.g.: ${this.conf.sample[this.chain]}) to received tokens`
          } else {
            return 'Input an address to received tokens'
          }
        },
        faucet() {
          return this.conf.sample ? this.conf.sample[this.chain] : ''
        }
      },
      methods: {
        onChange() {
          this.balance = {} // reset balance
          fetch(`/balance/${this.chain}`).then(r => r.json()).then(balance => {
            this.balance = balance
          })
        },
        requestToken(e) {

          this.getCaptcha(e).then(token => {
            if (this.address) {
              // button state
              document.getElementById("request-tokens-button").disabled = true;
              document.getElementById("button-loading").style.display = 'block';

              fetch(`/send/${this.chain}/${this.address}`, {
                method: 'POST',
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ recaptcha: token, discord_token: window.localStorage.getItem("access_token") })
              }).then(response => response.json()).then(data => {
                document.getElementById("request-tokens-button").disabled = false;
                document.getElementById("button-loading").style.display = 'none';
                this.message = `
                  <div class="alert alert-${data.result.code === 0 ? 'success' : 'danger'} alert-dismissible show fade mt-2" role="alert">
                      <li>${data.result.code === 0 ? 'Tokens sent' : 'Request failed'}</li>
                      <textarea class="form-control mt-1" rows="5" style="background-color:transparent">${JSON.stringify(data, null, 2)}</textarea>
                      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                  </div>
                  `
              });
            } else {
              this.message = '<span class="text-danger">Address is required</span>'
            }
          });
        },
        getCaptcha(e) {
          e.preventDefault();
          return new Promise((resolve, reject) => {
            grecaptcha.enterprise.ready(async () => {
              const token = await grecaptcha.enterprise.execute('<%= process.env.RECAPTCHA_PUBLIC %>', {action: 'token'});
              resolve(token)
            });
          });
        },
        async getToken(code) {
          const result = await fetch('http://localhost:3000/getToken', {
            method: 'POST',
            body: JSON.stringify({ code }),
            headers: {
              "Content-Type": "application/json",
            },
          })

          const resultJson = await result.json()
          window.localStorage.setItem("access_token", resultJson.access_token)
          window.localStorage.setItem("token_type", resultJson.token_type)
          return resultJson
        }
      }
    }).mount('#app')
  </script>
</body>

</html>
